name: Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2
      - name: set version env variable
        run: echo "CRATE_VERSION=$(cat Cargo.toml | sed -n 's/.*version = "\([^"]*\)".*/\1/p' | head -1)" >> $GITHUB_ENV
      - name: create release
        id: create_release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: app-v${{ env.CRATE_VERSION }}
          release_name: "IOTA RSpammer v${{ env.CRATE_VERSION }}"
          body: "See the assets to download this version and install."
          draft: true
          prerelease: false

  create-and-upload-assets:
    needs: create-release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            identifier: linux
            ext: ''
          - os: windows-latest
            identifier: windows
            ext: .exe

    steps:
      - uses: actions/checkout@v2
      - name: install rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install required packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libudev-dev libusb-1.0-0-dev

      # build the CLI
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      # upload binary to the GH release
      - name: upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ${{ format('./target/release/wallet{0}', matrix.ext ) }}
          asset_name: ${{ format('wallet-{0}{1}', matrix.identifier, matrix.ext ) }}
          asset_content_type: application/octet-stream